import jsPDF from 'jspdf';

export const generateFriendExpenseReport = (friendData) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  const pageHeight = pdf.internal.pageSize.height;
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  // Header
  pdf.setFontSize(20);
  pdf.setFont(undefined, 'bold');
  pdf.text('SplitTrack - Expense Report', margin, 30);
  
  // Friend information
  pdf.setFontSize(14);
  pdf.text(`Report with: ${friendData.friend_Name || 'Unknown Friend'}`, margin, 50);
  pdf.text(`Friend ID: ${friendData.friend_Id || 'N/A'}`, margin, 60);
  pdf.text(`Report Generated: ${new Date().toLocaleDateString()}`, margin, 70);
  
  // Net balance summary
  pdf.setFontSize(16);
  pdf.setFont(undefined, 'bold');
  const netAmount = friendData.netAmount || 0;
  const balanceText = netAmount >= 0 ? 'You are owed:' : 'You owe:';
  const balanceColor = netAmount >= 0 ? [0, 128, 0] : [255, 0, 0]; // Green for owed, red for owing
  
  pdf.text('Summary:', margin, 90);
  pdf.setTextColor(...balanceColor);
  pdf.text(`${balanceText} LKR ${Math.abs(netAmount).toFixed(2)}`, margin, 105);
  pdf.setTextColor(0, 0, 0); // Reset to black
  
  // Expenses details
  pdf.setFontSize(14);
  pdf.setFont(undefined, 'bold');
  pdf.text('Expense Details:', margin, 125);
  
  let yPosition = 140;
  const lineHeight = 8;
  
  if (friendData.details && friendData.details.length > 0) {
    friendData.details.forEach((expense, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight - 40) {
        pdf.addPage();
        yPosition = 30;
      }
      
      const isCurrentUserCreator = expense.currentUserRole === 'creator';
      const isFriendCreator = expense.friendRole === 'creator';
      
      // Expense header
      pdf.setFont(undefined, 'bold');
      pdf.setFontSize(12);
      pdf.text(`${index + 1}. ${expense.expenseName || 'Expense'}`, margin, yPosition);
      yPosition += lineHeight;
      
      // Expense details
      pdf.setFont(undefined, 'normal');
      pdf.setFontSize(10);
      pdf.text(`Total Amount: LKR ${expense.expenseTotalAmount?.toFixed(2) || '0.00'}`, margin + 10, yPosition);
      yPosition += lineHeight;
      
      // Who paid
      const paidBy = isCurrentUserCreator ? 'You' : friendData.friend_Name;
      pdf.text(`Paid by: ${paidBy}`, margin + 10, yPosition);
      yPosition += lineHeight;
      
      // Amount breakdown
      if (isCurrentUserCreator && !isFriendCreator) {
        pdf.text(`${friendData.friend_Name} owes you: LKR ${expense.friendAmount?.toFixed(2) || '0.00'}`, margin + 10, yPosition);
      } else if (isFriendCreator && !isCurrentUserCreator) {
        pdf.text(`You owe ${friendData.friend_Name}: LKR ${expense.currentUserAmount?.toFixed(2) || '0.00'}`, margin + 10, yPosition);
      } else {
        pdf.text('Shared expense - settled', margin + 10, yPosition);
      }
      yPosition += lineHeight + 5; // Extra space between expenses
    });
  } else {
    pdf.setFont(undefined, 'normal');
    pdf.text('No expenses found with this friend.', margin, yPosition);
  }
  
  // Footer
  const footerY = pageHeight - 20;
  pdf.setFontSize(8);
  pdf.setTextColor(128, 128, 128);
  pdf.text('Generated by SplitTrack App', margin, footerY);
  pdf.text(`Page 1 of ${pdf.internal.getNumberOfPages()}`, pageWidth - margin - 30, footerY);
  
  // Save the PDF
  const fileName = `SplitTrack_Report_${friendData.friend_Name || 'Friend'}_${new Date().toISOString().split('T')[0]}.pdf`;
  pdf.save(fileName);
};

export const generateDetailedReport = async (friendData) => {
  try {
    // Create a more detailed report with better formatting
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;
    
    // Title page
    pdf.setFontSize(24);
    pdf.setFont(undefined, 'bold');
    pdf.text('EXPENSE REPORT', pageWidth / 2, 60, { align: 'center' });
    
    pdf.setFontSize(16);
    pdf.setFont(undefined, 'normal');
    pdf.text('SplitTrack Application', pageWidth / 2, 80, { align: 'center' });
    
    // Friend details box
    pdf.setDrawColor(0, 0, 0);
    pdf.rect(margin, 100, pageWidth - (margin * 2), 60);
    
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Report Details:', margin + 10, 120);
    
    pdf.setFont(undefined, 'normal');
    pdf.text(`Friend: ${friendData.friend_Name || 'Unknown Friend'}`, margin + 10, 135);
    pdf.text(`Friend ID: ${friendData.friend_Id || 'N/A'}`, margin + 10, 145);
    pdf.text(`Generated: ${new Date().toLocaleString()}`, margin + 10, 155);
    
    // Net balance
    const netAmount = friendData.netAmount || 0;
    const balanceText = netAmount >= 0 ? 'You are owed' : 'You owe';
    const balanceColor = netAmount >= 0 ? [34, 139, 34] : [220, 20, 60];
    
    pdf.setFontSize(16);
    pdf.setFont(undefined, 'bold');
    pdf.setTextColor(...balanceColor);
    pdf.text(`${balanceText}: LKR ${Math.abs(netAmount).toFixed(2)}`, pageWidth / 2, 190, { align: 'center' });
    pdf.setTextColor(0, 0, 0);
    
    // Start new page for expenses
    pdf.addPage();
    
    // Expenses header
    pdf.setFontSize(18);
    pdf.setFont(undefined, 'bold');
    pdf.text('Expense Breakdown', margin, 30);
    
    let yPosition = 50;
    const lineHeight = 15;
    
    if (friendData.details && friendData.details.length > 0) {
      friendData.details.forEach((expense, index) => {
        // Check if we need a new page
        if (yPosition > pageHeight - 60) {
          pdf.addPage();
          yPosition = 30;
        }
        
        const isCurrentUserCreator = expense.currentUserRole === 'creator';
        const isFriendCreator = expense.friendRole === 'creator';
        
        // Expense box
        pdf.setDrawColor(200, 200, 200);
        pdf.rect(margin, yPosition - 5, pageWidth - (margin * 2), 45);
        
        // Expense name
        pdf.setFontSize(14);
        pdf.setFont(undefined, 'bold');
        pdf.text(`${index + 1}. ${expense.expenseName || 'Expense'}`, margin + 5, yPosition + 10);
        
        // Total amount
        pdf.setFontSize(12);
        pdf.setFont(undefined, 'normal');
        pdf.text(`Total: LKR ${expense.expenseTotalAmount?.toFixed(2) || '0.00'}`, pageWidth - margin - 60, yPosition + 10);
        
        // Who paid
        const paidBy = isCurrentUserCreator ? 'You paid' : `${friendData.friend_Name} paid`;
        pdf.text(paidBy, margin + 5, yPosition + 25);
        
        // Amount owed
        if (isCurrentUserCreator && !isFriendCreator) {
          pdf.setTextColor(34, 139, 34); // Green
          pdf.text(`${friendData.friend_Name} owes: LKR ${expense.friendAmount?.toFixed(2) || '0.00'}`, margin + 5, yPosition + 35);
        } else if (isFriendCreator && !isCurrentUserCreator) {
          pdf.setTextColor(220, 20, 60); // Red
          pdf.text(`You owe: LKR ${expense.currentUserAmount?.toFixed(2) || '0.00'}`, margin + 5, yPosition + 35);
        } else {
          pdf.setTextColor(128, 128, 128); // Gray
          pdf.text('Settled', margin + 5, yPosition + 35);
        }
        pdf.setTextColor(0, 0, 0); // Reset to black
        
        yPosition += 55;
      });
    } else {
      pdf.setFont(undefined, 'normal');
      pdf.text('No expenses found with this friend.', margin, yPosition);
    }
    
    // Add footer to all pages
    const totalPages = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by SplitTrack App', margin, pageHeight - 10);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 30, pageHeight - 10);
    }
    
    // Save the PDF
    const fileName = `SplitTrack_Detailed_Report_${friendData.friend_Name || 'Friend'}_${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);
    
    return { success: true, fileName };
  } catch (error) {
    console.error('Error generating PDF report:', error);
    return { success: false, error: error.message };
  }
};

export const generateGroupReport = async (groupData) => {
  try {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;
    
    // Title page
    pdf.setFontSize(24);
    pdf.setFont(undefined, 'bold');
    pdf.text('GROUP EXPENSE REPORT', pageWidth / 2, 60, { align: 'center' });
    
    pdf.setFontSize(16);
    pdf.setFont(undefined, 'normal');
    pdf.text('SplitTrack Application', pageWidth / 2, 80, { align: 'center' });
    
    // Group details box
    pdf.setDrawColor(0, 0, 0);
    pdf.rect(margin, 100, pageWidth - (margin * 2), 80);
    
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Group Details:', margin + 10, 120);
    
    pdf.setFont(undefined, 'normal');
    pdf.text(`Group Name: ${groupData.group?.name || 'Unknown Group'}`, margin + 10, 135);
    pdf.text(`Group ID: ${groupData.group?.groupId || 'N/A'}`, margin + 10, 145);
    pdf.text(`Total Members: ${groupData.group?.groupMembers?.length || 0}`, margin + 10, 155);
    pdf.text(`Total Expenses: ${groupData.group?.expenses?.length || 0}`, margin + 10, 165);
    pdf.text(`Generated: ${new Date().toLocaleString()}`, margin + 10, 175);
    
    // Add new page for members
    pdf.addPage();
    
    pdf.setFontSize(18);
    pdf.setFont(undefined, 'bold');
    pdf.text('GROUP MEMBERS', margin, 40);
    
    let yPosition = 60;
    const lineHeight = 12;
    
    if (groupData.group?.groupMembers && groupData.group.groupMembers.length > 0) {
      groupData.group.groupMembers.forEach((member, index) => {
        if (yPosition > pageHeight - 40) {
          pdf.addPage();
          yPosition = 40;
        }
        
        pdf.setFont(undefined, 'normal');
        pdf.setFontSize(12);
        const memberName = `${member.first_name || ''} ${member.last_name || ''}`.trim();
        pdf.text(`${index + 1}. ${memberName}`, margin, yPosition);
        yPosition += lineHeight;
      });
    } else {
      pdf.text('No members found', margin, yPosition);
    }
    
    // Add new page for expenses
    pdf.addPage();
    
    pdf.setFontSize(18);
    pdf.setFont(undefined, 'bold');
    pdf.text('GROUP EXPENSES', margin, 40);
    
    yPosition = 60;
    
    if (groupData.group?.expenses && groupData.group.expenses.length > 0) {
      groupData.group.expenses.forEach((expense, index) => {
        if (yPosition > pageHeight - 60) {
          pdf.addPage();
          yPosition = 40;
        }
        
        // Expense header
        pdf.setFont(undefined, 'bold');
        pdf.setFontSize(12);
        pdf.text(`${index + 1}. ${expense.name || 'Unnamed Expense'}`, margin, yPosition);
        yPosition += lineHeight;
        
        // Expense details
        pdf.setFont(undefined, 'normal');
        pdf.setFontSize(10);
        pdf.text(`Total Amount: LKR ${expense.expense_total_amount?.toFixed(2) || '0.00'}`, margin + 10, yPosition);
        yPosition += 8;
        
        if (expense.expense_owe_amount !== undefined) {
          pdf.text(`Your Share: LKR ${expense.expense_owe_amount?.toFixed(2) || '0.00'}`, margin + 10, yPosition);
          yPosition += 8;
        }
        
        if (expense.created_at) {
          pdf.text(`Date: ${new Date(expense.created_at).toLocaleDateString()}`, margin + 10, yPosition);
          yPosition += 8;
        }
        
        yPosition += 8; // Extra space between expenses
      });
    } else {
      pdf.text('No expenses found', margin, yPosition);
    }
    
    // Footer for all pages
    const totalPages = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by SplitTrack App', margin, pageHeight - 10);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 30, pageHeight - 10);
    }
    
    // Save the PDF
    const fileName = `SplitTrack_Group_Report_${groupData.group?.name || 'Group'}_${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);
    
    return { success: true, fileName };
  } catch (error) {
    console.error('Error generating group PDF report:', error);
    return { success: false, error: error.message };
  }
};
